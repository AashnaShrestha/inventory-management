@page "/inventoryItem"
@using Coursework.Data
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@*@using MudBlazor.Examples.Data.Models*@

<MudContainer>
    <MudGrid>
        <MudItem xs="12">
            <h3>Inventory</h3>
        </MudItem>
       @* <MudItem xs="4">
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </MudItem>
        <MudSpacer />
        <MudItem xs="2" Class="justify-content-end">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Inventory" Color="Color.Info" Size="Size.Small" @onclick="AddItemDialog">Add Item</MudButton>
        </MudItem>*@
       <MudItem xs="12">
            <MudTable Items="@inventoryItems" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<InventoryItem,bool>(FilterFunc)">
                <ToolBarContent>
                    <MudTextField T="string" @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true"></MudTextField>
                     <MudSpacer />
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Inventory" Color="Color.Info" Size="Size.Small" @onclick="AddItemDialog">Add Item</MudButton>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Item</MudTh>
                    <MudTh>Available Quantity</MudTh>
                    <MudTh>Last Taken Out</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.Id</MudTd>
                    <MudTd DataLabel="Item">@context.ItemName</MudTd>
                    <MudTd DataLabel="Available Quantity">@context.AvailableQuantity</MudTd>
                    <MudTd DataLabel="Last Taken Out">@context.LastTakenOut</MudTd>
                    <MudTd DataLabel="Actions">
                        <MudGrid>
                            <MudItem xs="6">
                                <MudIconButton Icon="@Icons.Filled.Edit" OnClick="@(() => UpdateItem(context))"></MudIconButton>
                            </MudItem>
                            <MudItem xs="6">
                                <MudIconButton Icon="@Icons.Filled.Delete" OnClick="@(() => DeleteItem(context))"></MudIconButton>
                            </MudItem>
                        </MudGrid>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
       </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private string searchString;
    private List<InventoryItem> inventoryItems;
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    protected override void OnInitialized()
    {
        inventoryItems = InventoryService.GetAllInventoryItems();
    }

    async Task AddItemDialog() {
        var dialog = await DialogService.ShowAsync<AddItemDialog>("Add Item");
        var res = await dialog.Result;

        if (!res.Cancelled)
        {
            inventoryItems = InventoryService.GetAllInventoryItems();

        }
    }

    async Task UpdateItem(InventoryItem selectedItem){
        var parameters = new DialogParameters { ["updateItem"] = selectedItem };
        var dialog = await DialogService.ShowAsync<UpdateItemDialog>("Update Item", parameters);
        var res = await dialog.Result;
        if (!res.Cancelled)
        {
            inventoryItems = InventoryService.GetAllInventoryItems();
            _ = JSRuntime.InvokeVoidAsync("console.log", inventoryItems);
        }
    }

     async Task DeleteItem(InventoryItem selectedItem)
    {
        //var parameters = new DialogParameters { ["inventoryItemId"] = selectedItem.Id };

        var dialog = await DialogService.ShowAsync<DeleteItemDialog>("Delete Item");

        var res = await dialog.Result;
        _ = JSRuntime.InvokeVoidAsync("console.log", res.Cancelled);
        if(!res.Cancelled) {
            InventoryService.Delete(selectedItem.Id);
            inventoryItems = InventoryService.GetAllInventoryItems();

        }
    }

    private bool FilterFunc(InventoryItem item)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (item.ItemName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
